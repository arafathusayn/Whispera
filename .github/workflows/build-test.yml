name: Build and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  APP_NAME: "Whispera"
  SCHEME_NAME: "Whispera"

jobs:
  build-and-test:
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Resolve Swift Package Dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project "${APP_NAME}.xcodeproj" -scheme "${SCHEME_NAME}"

    - name: Build for testing
      run: |
        xcodebuild build-for-testing \
                   -project "${APP_NAME}.xcodeproj" \
                   -scheme "${SCHEME_NAME}" \
                   -destination "platform=macOS" \
                   -configuration Debug \
                   -derivedDataPath build/DerivedData \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO

    - name: Run unit tests
      run: |
        xcodebuild test-without-building \
                   -project "${APP_NAME}.xcodeproj" \
                   -scheme "${SCHEME_NAME}" \
                   -destination "platform=macOS" \
                   -derivedDataPath build/DerivedData \
                   -testPlan "Whispera" \
                   -only-testing WhisperaUnitTests

    - name: Run UI tests
      run: |
        xcodebuild test-without-building \
                   -project "${APP_NAME}.xcodeproj" \
                   -scheme "${SCHEME_NAME}" \
                   -destination "platform=macOS" \
                   -derivedDataPath build/DerivedData \
                   -testPlan "Whispera" \
                   -only-testing WhisperaUITests
      continue-on-error: true # UI tests may be flaky in CI environment

    - name: Build release (no signing)
      run: |
        xcodebuild -project "${APP_NAME}.xcodeproj" \
                   -scheme "${SCHEME_NAME}" \
                   -configuration Release \
                   -destination "platform=macOS" \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   build

    - name: Check for SwiftUI deprecations
      run: |
        # Look for deprecated SwiftUI APIs
        if grep -r "\.navigationBarTitle\|\.navigationBarItems" --include="*.swift" . ; then
          echo "‚ö†Ô∏è Found deprecated SwiftUI APIs"
        fi

    - name: Analyze code size
      run: |
        # Basic code metrics
        echo "üìä Code Statistics:"
        find . -name "*.swift" -not -path "./build/*" -not -path "./DerivedData/*" | wc -l | xargs echo "Swift files:"
        find . -name "*.swift" -not -path "./build/*" -not -path "./DerivedData/*" -exec wc -l {} + | tail -1 | xargs echo "Total lines:"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          build/DerivedData/Logs/Test/
          build/
        retention-days: 3

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Create a simple test report comment
          const testStatus = '${{ job.status }}' === 'success' ? '‚úÖ All tests passed' : '‚ö†Ô∏è Some tests failed';
          const buildStatus = '${{ job.status }}' === 'success' ? '‚úÖ Build successful' : '‚ùå Build failed';
          
          const comment = `## üß™ Test Results
          
          ${buildStatus}
          ${testStatus}
          
          **Build Configuration:** Release (unsigned)
          **Platform:** macOS
          **Xcode:** Latest stable
          
          _This is an automated test run for PR validation._`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  code-quality:
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: SwiftLint
      run: |
        # Install SwiftLint if available
        if command -v swiftlint >/dev/null 2>&1; then
          echo "Running SwiftLint..."
          swiftlint --reporter github-actions-logging
        else
          echo "SwiftLint not available, skipping..."
        fi
      continue-on-error: true

    - name: Check for TODO/FIXME comments
      run: |
        echo "üîç Scanning for TODO/FIXME comments..."
        find . -name "*.swift" -not -path "./build/*" -not -path "./DerivedData/*" -exec grep -Hn "TODO\|FIXME\|XXX\|HACK" {} \; || echo "No TODO/FIXME comments found"

    - name: Security scan
      run: |
        echo "üîí Basic security checks..."
        # Check for potential security issues
        if grep -r "NSAppTransportSecurity\|NSAllowsArbitraryLoads" --include="*.plist" . ; then
          echo "‚ö†Ô∏è Found ATS bypass - review security implications"
        fi
        
        # Check for hardcoded secrets (basic patterns)
        if grep -r "password\s*=\|secret\s*=\|key\s*=" --include="*.swift" . ; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
        fi